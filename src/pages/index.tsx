import { type NextPage } from "next";
import Head from "next/head";

import { useEffect, useRef, useState } from "react";
import Drop from "@/components/Drop";
import { Document, Page, pdfjs } from "react-pdf";
import { PDFDocument, degrees, rgb } from "pdf-lib";
import { blobToURL } from "@/utils/Utils";
import PagingControl from "@/components/PagingControl";
import { BigButton } from "@/components/BigButton";
import DraggableText from "@/components/DraggableText";
import dayjs from "dayjs";
import ButtonXl from "@/components/ButtonXl";
import { BsPlusLg, BsTrash } from "react-icons/bs";
import { RxReset } from "react-icons/rx";
import { GrRotateRight } from "react-icons/gr";
import Loading from "@/components/Loading";

pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;

function downloadURI(uri: string, name: string) {
  var link = document.createElement("a");
  link.download = name;
  link.href = uri;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

const Home: NextPage = () => {
  const [originalPdf, setOriginalPdf] = useState(null);
  const [pdf, setPdf] = useState(null);
  const [position, setPosition] = useState(null);
  const [setSignatureDialogVisible] = useState(false);
  const [textInputVisible, setTextInputVisible] = useState(false);
  const [pageNum, setPageNum] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [pageDetails, setPageDetails] = useState(null);
  const [currentRotation, setCurrentRotation] = useState(0);
  const documentRef = useRef(null);

  const handleRotatePage = async (inputDegrees: number = 90) => {
    const pdfDoc = await PDFDocument.load(pdf, {
      ignoreEncryption: true,
    });
    const pages = pdfDoc.getPages();
    const currentPage = pages[pageNum];
    currentPage.setRotation(degrees(currentRotation + inputDegrees))
    setCurrentRotation(currentRotation + inputDegrees);
    const pdfBytes = await pdfDoc.save();
    const blob = new Blob([new Uint8Array(pdfBytes)]);
    const URL = await blobToURL(blob);
    setPdf(URL);
  }

  const handleRemovePage = async (inputPageNum: number = pageNum) => {
    const pdfDoc = await PDFDocument.load(pdf, {
      ignoreEncryption: true,
    });
    pdfDoc.removePage(inputPageNum);
    setPageNum(inputPageNum > 0 ? inputPageNum - 1 : 0)
    const pdfBytes = await pdfDoc.save();
    const blob = new Blob([new Uint8Array(pdfBytes)]);
    const URL = await blobToURL(blob);
    setPdf(URL);
  }

  let thumbnails: any[] = []
  for (let i = 0; i < totalPages; i++) {
    thumbnails = [...thumbnails,
    <Page
      className={`rounded-md overflow-hidden max-h-[200px] cursor-pointer mr-4 ${i === pageNum ? 'border-4 border-amber-300' : ''}`}
      pageNumber={i + 1}
      width={180}
      onClick={() => setPageNum(i)}
    />
    ]
  }

  return (
    <>
      <Head>
        <title>PDF File Handler</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={
        `flex min-h-screen items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]`
      }>

        <div className={
          `flex gap-12 px-4 py-16
          ${pdf ? 'flex-row' : 'flex-col items-center justify-center'}`
        }>

          <header className={
            `flex flex-col
            ${!pdf ? 'items-center' : 'max-w-sm'}
            `
          }>
            <img src="./whitevision.png" width={150} className="flex justify-center gap-2 text-lg mb-4" />
            <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
              <span className="text-[hsl(280,100%,70%)]">PDF</span> File Handler
            </h1>
            <h5 className="text-white font-extrabold uppercase ml-1 text-sm mt-2">product owned by Jasper B.</h5>
            <div className={
              `grid gap-4 mt-6
              ${!pdf ? 'grid-cols-1' : 'grid-cols-1'}
              `
            }>
              <Drop
                onLoaded={async (files: any) => {
                  const URL = await blobToURL(files[0]);
                  setPdf(URL);
                  setOriginalPdf(URL);
                }}
                className={pdf ? 'opacity-50' : '!p-16'}
              />
              {pdf
                ? <>
                  <ButtonXl
                    title={"Reset"}
                    icon={<RxReset />}
                    description="Verwijder PDF en begin opnieuw."
                    onClick={() => {
                      //                setTextInputVisible(false);
                      setPdf(originalPdf);
                      //                      setTotalPages(0);
                      setPageNum(0);
                      //                  setPageDetails(null);
                    }}
                  />
                  <ButtonXl
                    title="Download"
                    description="Creëer en download het PDF bestand."
                    className={pdf ? '' : 'opacity-40 pointer-events-none'}
                    onClick={() => {
                      downloadURI(pdf, "pdffilehandler.pdf");
                    }}
                  />

                  <PagingControl
                    pageNum={pageNum}
                    setPageNum={setPageNum}
                    totalPages={totalPages}
                  />
                </>
                : null}
            </div>
          </header>

          {pdf ? (
            <div>
              <nav className="flex gap-1 mb-2">
                <BigButton
                  marginRight={8}
                  title={<><BsPlusLg /> Tekst toevoegen</>}
                  onClick={() => setTextInputVisible(true)}
                />
                <BigButton
                  marginRight={8}
                  title={<><GrRotateRight /> Roteer 90°</>}
                  onClick={async () => handleRotatePage()}
                />
                <BigButton
                  marginRight={8}
                  title={<><BsTrash /> Verwijder pagina</>}
                  onClick={async () => handleRemovePage(pageNum)}
                />
              </nav>

              <main
                ref={documentRef}
                className={`${(window.innerWidth < 1200) ? `w-[${window.innerWidth * 0.75}px]` : 'w-[1000px] flex flex-row gap-2'}`}
              >
                {textInputVisible ? (
                  <DraggableText
                    initialText={
                      textInputVisible === "date"
                        ? dayjs().format("M/d/YYYY")
                        : null
                    }
                    onCancel={() => setTextInputVisible(false)}
                    onEnd={setPosition}
                    onSet={async (text) => {
                      const { originalHeight, originalWidth } = pageDetails;
                      const scale = originalWidth / documentRef.current.clientWidth;

                      const y =
                        documentRef.current.clientHeight -
                        (position.y +
                          (12 * scale) -
                          position.offsetY -
                          documentRef.current.offsetTop);
                      const x =
                        position.x -
                        166 -
                        position.offsetX -
                        documentRef.current.offsetLeft;

                      // new XY in relation to actual document size
                      const newY =
                        (y * originalHeight) / documentRef.current.clientHeight;
                      const newX =
                        (x * originalWidth) / documentRef.current.clientWidth;

                      const pdfDoc = await PDFDocument.load(pdf, {
                        ignoreEncryption: true,
                      });

                      const pages = pdfDoc.getPages();
                      const firstPage = pages[pageNum];

                      firstPage.drawText(text, {
                        x: newX,
                        y: newY,
                        size: 20 * scale,
                      });

                      const pdfBytes = await pdfDoc.save();
                      const blob = new Blob([new Uint8Array(pdfBytes)]);

                      const URL = await blobToURL(blob);
                      setPdf(URL);
                      setPosition(null);
                      setTextInputVisible(false);
                    }}
                  />
                ) : null}
                <Document
                  file={pdf}
                  loading={<Loading />}
                  onLoadSuccess={(data) => {
                    setTotalPages(data.numPages);
                  }}
                  className="w-[800px]"
                >
                  <Page
                    className="rounded-lg overflow-hidden"
                    pageNumber={pageNum + 1}
                    width={(window.innerWidth < 1200) ? window.innerWidth * 0.75 : 800}
                    onLoadSuccess={(data) => {
                      setPageDetails(data);
                    }}
                  />
                </Document>

                <section className={`w-[200px] overflow-y-auto overflow-x-hidden h-[600px] rounded-md relative`}>
                  <Document
                    file={pdf}
                    loading={undefined}
                  >
                    <div className="grid grid-cols-1 gap-2 p-r-2">
                      {thumbnails}
                    </div>
                  </Document>
                </section>
              </main>
            </div>
          ) : null}
        </div>

        <div className="fixed inset-0 bg-gradient-to-b from-transparent via-transparent to-black/50 z-10 pointer-events-none" />
      </div>
    </>
  );
};

export default Home;